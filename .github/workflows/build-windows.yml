name: Windows

on:
  push:
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  INSTALL_PREFIX: _install

jobs:
  build-windows:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules:  'true'
        fetch-depth: 0


    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      shell: cmd
      run: |
           cmake -B ${{github.workspace}}/_build ^
                 -A x64 ^
                 -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} ^
                 -DCMAKE_INSTALL_PREFIX=${{env.INSTALL_PREFIX}} ^
                 -DBUILD_SHARED_LIBS=OFF

    - name: Build (Release)
      # Build your program with the given configuration
      shell: cmd
      run: |
           cmake --build ${{github.workspace}}/_build --config Release
           cmake --build ${{github.workspace}}/_build --config Release --target INSTALL
      
    - name: Build (Debug)
      # Build your program with the given configuration
      shell: cmd
      run: |
           cmake --build ${{github.workspace}}/_build --config Debug
           cmake --build ${{github.workspace}}/_build --config Debug --target INSTALL

    - name: Upload binaries
      uses: actions/upload-artifact@v2
      with:
        name: tcp-pubsub-win64
        path: ${{github.workspace}}/${{env.INSTALL_PREFIX}}
